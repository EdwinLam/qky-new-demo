// 所有子项目的通用配置
apply from: 'dependencies.gradle'
buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
    }
    repositories {
        repositories { maven { url 'http://repo.qtonecloud.cn/content/groups/public/' } }
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'org.springframework:springloaded:1.2.7.RELEASE'
    }
}

subprojects {
    apply plugin: 'war'
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'//应用依赖管理插件
    apply plugin: 'war'// war可以将开发的应用打包成部署包

    version = '1.0.0'

    // JVM 版本号要求
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    // java编译的时候缺省状态下会因为中文字符而失败
    [compileJava,compileTestJava,javadoc]*.options*.encoding = 'UTF-8'
    configurations {
        provided
        compile.extendsFrom provided
        all*.exclude group: 'org.springframework', module: 'spring'
        all*.exclude group: 'asm', module: 'asm'
        all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
    repositories {
        repositories { maven { url 'http://repo.qtonecloud.cn/content/groups/public/' } }
        mavenCentral()
    }

    dependencies {
        //都会依赖domain
        compile group: "cn.thinkjoy.common", name: "thinkjoy-domain-common", version: "$thinkjoyCommonVersion", changing: true
        // 加载libs目录下所有的jar
        compile fileTree(dir: 'libs', include: ['*.jar'])
    }

    jar {
        manifest {
            attributes 'Implementation-Title': 'Gradle Quickstart',
                    'Implementation-Version': version,
                    'Main-Class': 'cn.thinkjoy.QkyWebApplication'
        }
    }

    // 显示当前项目下所有用于 compile 的 jar.
    task listJars(description: 'Display all compile jars.') << {
        configurations.compile.each { File file -> println file.name }
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }

    bootRun{
        sourceResources sourceSets.main
    }
}

